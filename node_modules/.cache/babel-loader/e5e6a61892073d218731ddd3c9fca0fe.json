{"ast":null,"code":"var _jsxFileName = \"/Users/ashiawhite/Desktop/Dynamic_Web_Exercises/Exercise_Two/src/containers/Home.js\";\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { useHistory } from \"react-router-dom\";\nimport WeatherImage from '../components/WeatherImage.js'; //<p> Weather: {weatherData.weather && weatherData.weather[0].all}okta </p>\n//API Keys\n\nconst defaultKey = \"ede293b25c093960ebbf782841b0b308\";\n\nfunction Home() {\n  const [weatherData, setWeatherData] = useState({});\n  const [city, setCity] = useState(\"Dallas\");\n  const [currentTemperature, setCurrentTemperature] = useState(\"\");\n  const [highTemperature, setHighTemperature] = useState(\"\");\n  const [lowTemperature, setLowTemperature] = useState(\"\");\n  const [currentHumidity, setCurrentHumidity] = useState(\"\");\n  const [currentWind, setCurrentWind] = useState(\"\");\n  const [currentPressure, setCurrentPressure] = useState(\"\");\n  const [currentclouds, setCurrentClouds] = useState(\"\");\n  let history = useHistory();\n  useEffect(() => {\n    let searchParams = history.location.search;\n    let urlParams = new URLSearchParams(searchParams);\n    console.log(\"urlParams\", urlParams);\n    let city = urlParams.get(\"city\");\n\n    if (city) {\n      setCity(city);\n    }\n  }, [history]);\n  useEffect(() => {\n    //Make a get request for the weather by city\n    if (city) {\n      axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${city}&units=imperial&appid=${defaultKey}`).then(function (response) {\n        // handle success\n        setWeatherData(response.data);\n      }).catch(function (error) {\n        // handle error\n        console.log(error);\n      });\n    }\n  }, [city]);\n  console.log(\"weatherData\", weatherData);\n  useEffect(() => {\n    if (weatherData.main) {\n      setCurrentTemperature(weatherData.main.temp);\n      setHighTemperature(weatherData.main.temp_max);\n      setLowTemperature(weatherData.main.temp_min);\n      setCurrentHumidity(weatherData.main.humidity);\n      setCurrentPressure(weatherData.main.pressure);\n      setCurrentClouds(weatherData.clouds.all);\n      let cloudinessValue = weatherData.clouds.all / 200;\n      setCloudiness(cloudinessValue); //setWeatherType(weatherData.weather[0].main);\n    }\n  }, [weatherData]);\n  return React.createElement(\"div\", {\n    className: \"Home\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, \" Weather in \", city, \" \"), React.createElement(\"div\", {\n    className: \"WeatherInfo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(WeatherImage, {\n    weatherType: weatherType,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"WeatherInfo_Image\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: \"\",\n    alt: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"WeatherInfo_Data\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"CurrentTemperature\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, \" \", weatherData.main && weatherData.main.temp, \"\\xB0\")), React.createElement(\"div\", {\n    className: \"OtherTemperature\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, \" High Temp: \", React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, weatherData.main && weatherData.main.temp_max, \"\\xB0 \")), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, \" Low Temp: \", React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, weatherData.main && weatherData.main.temp_min, \"\\xB0 \"))), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, \" Humididty: \", weatherData.main && weatherData.main.humidity, \"%\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, \" Wind: \", weatherData.wind && weatherData.wind.speed, \"mph \"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, \" Pressure: \", weatherData.main && weatherData.main.pressure, \"psi \"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, \" Clouds: \", weatherData.clouds && weatherData.clouds.all, \"okta \"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: \"\",\n    alt: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  })))));\n}\n\nexport default Home;","map":{"version":3,"sources":["/Users/ashiawhite/Desktop/Dynamic_Web_Exercises/Exercise_Two/src/containers/Home.js"],"names":["React","useEffect","useState","axios","useHistory","WeatherImage","defaultKey","Home","weatherData","setWeatherData","city","setCity","currentTemperature","setCurrentTemperature","highTemperature","setHighTemperature","lowTemperature","setLowTemperature","currentHumidity","setCurrentHumidity","currentWind","setCurrentWind","currentPressure","setCurrentPressure","currentclouds","setCurrentClouds","history","searchParams","location","search","urlParams","URLSearchParams","console","log","get","then","response","data","catch","error","main","temp","temp_max","temp_min","humidity","pressure","clouds","all","cloudinessValue","setCloudiness","weatherType","wind","speed"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { useHistory } from \"react-router-dom\";\nimport WeatherImage from '../components/WeatherImage.js';\n\n\n//<p> Weather: {weatherData.weather && weatherData.weather[0].all}okta </p>\n\n  //API Keys\nconst defaultKey = \"ede293b25c093960ebbf782841b0b308\";\n\nfunction Home() {\n\n\n\n  const [weatherData, setWeatherData] = useState({});\n  const [city, setCity] = useState(\"Dallas\");\n  const[currentTemperature, setCurrentTemperature]= useState(\"\");\n  const[highTemperature, setHighTemperature]=useState(\"\");\n  const[lowTemperature,setLowTemperature]=useState(\"\");\n  const[currentHumidity,setCurrentHumidity]=useState(\"\");\n  const[currentWind,setCurrentWind]=useState(\"\");\n  const[currentPressure,setCurrentPressure]=useState(\"\");\n  const[currentclouds,setCurrentClouds]=useState(\"\");\n\n\n\n\n  let history = useHistory();\n\n  useEffect(() => {\n\n    let searchParams = history.location.search;\n    let urlParams = new URLSearchParams(searchParams);\n    console.log(\"urlParams\",urlParams);\n    let city = urlParams.get(\"city\");\n    if (city) {\n        setCity(city);\n      }\n    }, [history]);\n\n\n\n\n  useEffect(() => {\n    //Make a get request for the weather by city\n    if (city){\n\n    axios\n\n    .get(\n      `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=imperial&appid=${defaultKey}`\n        )\n    .then(function (response) {\n    // handle success\n      setWeatherData(response.data);\n      })\n   .catch(function (error) {\n    // handle error\n    console.log(error);\n  });\n\n}\n}, [city]);\n    console.log(\"weatherData\",weatherData);\n\n\n  useEffect(() => {\n    if (weatherData.main) {\n      setCurrentTemperature(weatherData.main.temp);\n      setHighTemperature(weatherData.main.temp_max);\n      setLowTemperature(weatherData.main.temp_min);\n      setCurrentHumidity(weatherData.main.humidity);\n      setCurrentPressure(weatherData.main.pressure);\n      setCurrentClouds(weatherData.clouds.all);\n\n      let cloudinessValue = weatherData.clouds.all / 200;\n      setCloudiness(cloudinessValue);\n\n      //setWeatherType(weatherData.weather[0].main);\n    }\n\n\n  }, [weatherData]);\n\n\n  return (\n    <div className=\"Home\">\n      <h1> Weather in {city} </h1>\n\n      <div className=\"WeatherInfo\">\n        <WeatherImage weatherType={weatherType}/>\n          <div className=\"WeatherInfo_Image\">\n          <img src=\"\" alt=\"\"/>\n          </div>\n      <div className=\"WeatherInfo_Data\">\n        <div className=\"CurrentTemperature\">\n          <p> {weatherData.main && weatherData.main.temp}&#176;</p>\n        </div>\n      <div className=\"OtherTemperature\">\n          <p> High Temp: <strong>{weatherData.main && weatherData.main.temp_max}&#176; </strong>\n          </p>\n          <p> Low Temp: <strong>{weatherData.main && weatherData.main.temp_min}&#176; </strong>\n          </p>\n      </div>\n      <p> Humididty: {weatherData.main && weatherData.main.humidity}%</p>\n      <p> Wind: {weatherData.wind && weatherData.wind.speed}mph </p>\n      <p> Pressure: {weatherData.main && weatherData.main.pressure}psi </p>\n      <p> Clouds: {weatherData.clouds && weatherData.clouds.all}okta </p>\n      <div>\n        <img src=\"\" alt=\"\" />\n      </div>\n\n    </div>\n  </div>\n</div>\n\n\n\n\n  );\n}\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}